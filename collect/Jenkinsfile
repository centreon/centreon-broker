/*
** Variables.
*/
properties([buildDiscarder(logRotator(numToKeepStr: '10'))])
def serie = '21.10'
def maintenanceBranch = "${serie}.x"
def qaBranch = "dev-${serie}.x"

env.REF_BRANCH = 'master'
env.PROJECT='centreon-collect'

/*
** Branch management
*/
if (env.BRANCH_NAME.startsWith('release-')) {
  env.BUILD = 'RELEASE'
} else if ((env.BRANCH_NAME == env.REF_BRANCH) || (env.BRANCH_NAME == maintenanceBranch)) {
  env.BUILD = 'REFERENCE'
} else if ((env.BRANCH_NAME == 'develop') || (env.BRANCH_NAME == qaBranch)) {
  env.BUILD = 'QA'
} else {
  env.BUILD = 'CI'
}

def buildBranch = env.BRANCH_NAME
if (env.CHANGE_BRANCH) {
  buildBranch = env.CHANGE_BRANCH
}

/*
** Functions
*/
def isStableBuild() {
  return ((env.BUILD == 'RELEASE') || (env.BUILD == 'REFERENCE'))
  return ((env.BUILD == 'RELEASE') || (env.BUILD == 'QA'))
}

/*
** Pipeline code.
*/

stage('Unit tests') {
  parallel 'centos7': {
    node {
      dir('centreon-collect-centos7') {
        checkout scm
        sh 'docker run -it -v "$PWD:/src" registry.centreon.com/centreon-collect-build-centos7:1.0'
      }
    }
  },
  'centos8': {
    node {
      dir('centreon-collect-centos8') {
        checkout scm
      }
      /*def BUILD_COLLECT_IMAGE = "registry.centreon.com/centreon-collect-build-centos8:1.0"
      sh "docker pull $BUILD_COLLECT_IMAGE"
      def containerid = sh(script: "docker create $BUILD_COLLECT_IMAGE /src", returnStdout: true)
      sh "docker cp centreon-collect-centos8 '$containerid:/src/centreon-collect'"
      dir('centreon-collect-centos8') {
        sh "docker start -a $containerid"
        sh "docker stop $containerid"
        sh "docker rm $containerid"
      }*/
    }
  },
  'debian10': {
    node {
      dir('centreon-collect-debian10') {
        checkout scm
      }
      /*def BUILD_COLLECT_IMAGE = "registry.centreon.com/centreon-collect-build-debian10:1.0"
      sh "docker pull $BUILD_COLLECT_IMAGE"
      def containerid = sh(script: "docker create $BUILD_COLLECT_IMAGE /src", returnStdout: true)
      sh "docker cp centreon-collect-debian10 '$containerid:/src/centreon-collect'"
      sh "docker start -a $containerid"
      sh "docker stop $containerid"
      sh "docker rm $containerid"*/
    }
  }
}

 /* stage('Package') {
    parallel 'centos7': {
      node {
        dir('centreon-collect-centos7') {
          checkout scm
        }
          def BUILD_COLLECT_IMAGE = "registry.centreon.com/centreon-collect-package-centos7:1.0"
          sh "docker pull $BUILD_COLLECT_IMAGE"
          def containerid = sh(script: "docker create $BUILD_COLLECT_IMAGE /src", returnStdout: true)
          sh "docker cp centreon-collect-centos7 '$containerid:/src/centreon-collect'"
          sh "docker start -a $containerid"
          sh "docker stop $containerid"
          sh "docker rm $containerid"
        }
      }
    },
    'centos8': {
      node {
        dir('centreon-collect') {
          checkout scm
        }
          def BUILD_COLLECT_IMAGE = "registry.centreon.com/centreon-collect-package-centos8:1.0"
          sh "docker pull $BUILD_COLLECT_IMAGE"
          def containerid = sh(script: "docker create $BUILD_COLLECT_IMAGE /src", returnStdout: true)
          sh "docker cp centreon-collect-centos8 '$containerid:/src/centreon-collect'"
          sh "docker start -a $containerid"
          sh "docker stop $containerid"
          sh "docker rm $containerid"
        }
      }
    },
    'debian10': {
      node {
        dir('centreon-collect-debian10') {
          checkout scm
        }
          def BUILD_COLLECT_IMAGE = "registry.centreon.com/centreon-collect-package-debian10:1.0"
          sh "docker pull $BUILD_COLLECT_IMAGE"
          def containerid = sh(script: "docker create $BUILD_COLLECT_IMAGE /src", returnStdout: true)
          sh "docker cp centreon-collect-debian10 '$containerid:/src/centreon-collect'"
          sh "docker start -a $containerid"
          sh "docker stop $containerid"
          sh "docker rm $containerid"
        }
      }
    }
    if ((currentBuild.result ?: 'SUCCESS') != 'SUCCESS') {
      error('Package stage failure.');
    }
  }*/